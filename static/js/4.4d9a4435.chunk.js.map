{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignedUp","checkValidity","rules","isValid","trim","length","maxLength","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","building","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","errorMessage","changed","loading","error","message","authRedirect","isAuth","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","dispatch","actions","input","inputElement","inputClasses","InputElement","validationError","Invalid","ValidationError","join","onChange","options","opt","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.4d9a4435.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2CkeW\",\"Input\":\"Auth_Input__O2o_o\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/actions\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Email Address\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    isSignedUp: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.building && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        valid: this.checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true\r\n      }\r\n    };\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignedUp\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return { isSignedUp: !prevState.isSignedUp };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map(formElement => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        touched={formElement.config.touched}\r\n        shouldValidate={formElement.config.validation}\r\n        errorMessage={\r\n          formElement.config.validation\r\n            ? formElement.config.validation.errorMessage\r\n            : null\r\n        }\r\n        changed={event => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuth) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">\r\n            {this.state.isSignedUp ? \"SIGNIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\r\n          SWITCH TO {!this.state.isSignedUp ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token != null,\r\n    building: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignedUp) =>\r\n      dispatch(actions.auth(email, password, isSignedUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n  let validationError = null;\r\n  if (props.touched && props.invalid && props.shouldValidate) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = <p className={classes.ValidationError}>{props.errorMessage}</p>;\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map(opt => (\r\n            <option key={opt.value} value={opt.value}>\r\n              {opt.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3-gq-\",\"Label\":\"Input_Label__3K4A5\",\"InputElement\":\"Input_InputElement__3obWe\",\"Invalid\":\"Input_Invalid__H9Uhu\",\"ValidationError\":\"Input_ValidationError__2fEzw\"};"],"sourceRoot":""}